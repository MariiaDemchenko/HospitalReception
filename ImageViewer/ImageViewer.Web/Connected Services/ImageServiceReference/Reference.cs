//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ImageClient.ImageServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImageInfo", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.ServiceModel.ImageViewer.Contra" +
        "cts.DataContracts")]
    [System.SerializableAttribute()]
    public partial class ImageInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ImageSizeBytesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ImageClient.ImageServiceReference.ConstantsImageSize SizeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ImageSizeBytes {
            get {
                return this.ImageSizeBytesField;
            }
            set {
                if ((this.ImageSizeBytesField.Equals(value) != true)) {
                    this.ImageSizeBytesField = value;
                    this.RaisePropertyChanged("ImageSizeBytes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ImageClient.ImageServiceReference.ConstantsImageSize Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Constants.ImageSize", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.ServiceModel.ImageViewer")]
    public enum ConstantsImageSize : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Small = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Original = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImageProcessingFault", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.ServiceModel.ImageViewer.Contra" +
        "cts.DataContracts")]
    [System.SerializableAttribute()]
    public partial class ImageProcessingFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Action {
            get {
                return this.ActionField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionField, value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Microsoft.ServiceModel.ImageViewer.Contracts", ConfigurationName="ImageServiceReference.IImageViewer")]
    public interface IImageViewer {
        
        // CODEGEN: Generating message contract since the operation GetAllImages is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.ImageViewer.Contracts/IImageViewer/GetAllImages", ReplyAction="http://Microsoft.ServiceModel.ImageViewer.Contracts/IImageViewer/GetAllImagesResp" +
            "onse")]
        ImageClient.ImageServiceReference.FilesData GetAllImages(ImageClient.ImageServiceReference.GetAllImagesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.ImageViewer.Contracts/IImageViewer/GetAllImages", ReplyAction="http://Microsoft.ServiceModel.ImageViewer.Contracts/IImageViewer/GetAllImagesResp" +
            "onse")]
        System.Threading.Tasks.Task<ImageClient.ImageServiceReference.FilesData> GetAllImagesAsync(ImageClient.ImageServiceReference.GetAllImagesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.ImageViewer.Contracts/IImageViewer/DownloadImage", ReplyAction="http://Microsoft.ServiceModel.ImageViewer.Contracts/IImageViewer/DownloadImageRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ImageClient.ImageServiceReference.ImageProcessingFault), Action="http://Microsoft.ServiceModel.ImageViewer.Contracts/IImageViewer/DownloadImageIma" +
            "geProcessingFaultFault", Name="ImageProcessingFault", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.ServiceModel.ImageViewer.Contra" +
            "cts.DataContracts")]
        System.IO.Stream DownloadImage(ImageClient.ImageServiceReference.ImageInfo data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.ImageViewer.Contracts/IImageViewer/DownloadImage", ReplyAction="http://Microsoft.ServiceModel.ImageViewer.Contracts/IImageViewer/DownloadImageRes" +
            "ponse")]
        System.Threading.Tasks.Task<System.IO.Stream> DownloadImageAsync(ImageClient.ImageServiceReference.ImageInfo data);
        
        // CODEGEN: Generating message contract since the operation UploadImage is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.ImageViewer.Contracts/IImageViewer/UploadImage", ReplyAction="http://Microsoft.ServiceModel.ImageViewer.Contracts/IImageViewer/UploadImageRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ImageClient.ImageServiceReference.ImageProcessingFault), Action="http://Microsoft.ServiceModel.ImageViewer.Contracts/IImageViewer/UploadImageImage" +
            "ProcessingFaultFault", Name="ImageProcessingFault", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.ServiceModel.ImageViewer.Contra" +
            "cts.DataContracts")]
        ImageClient.ImageServiceReference.UploadImageResponse UploadImage(ImageClient.ImageServiceReference.ImageData request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.ImageViewer.Contracts/IImageViewer/UploadImage", ReplyAction="http://Microsoft.ServiceModel.ImageViewer.Contracts/IImageViewer/UploadImageRespo" +
            "nse")]
        System.Threading.Tasks.Task<ImageClient.ImageServiceReference.UploadImageResponse> UploadImageAsync(ImageClient.ImageServiceReference.ImageData request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetAllImagesRequest {
        
        public GetAllImagesRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FilesData", WrapperNamespace="http://Microsoft.ServiceModel.ImageViewer.Contracts", IsWrapped=true)]
    public partial class FilesData {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Microsoft.ServiceModel.ImageViewer.Contracts", Order=0)]
        public ImageClient.ImageServiceReference.ImageInfo[] ImageFiles;
        
        public FilesData() {
        }
        
        public FilesData(ImageClient.ImageServiceReference.ImageInfo[] ImageFiles) {
            this.ImageFiles = ImageFiles;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ImageData", WrapperNamespace="http://Microsoft.ServiceModel.ImageViewer.Contracts", IsWrapped=true)]
    public partial class ImageData {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://Microsoft.ServiceModel.ImageViewer.Contracts")]
        public ImageClient.ImageServiceReference.ImageInfo ImageInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Microsoft.ServiceModel.ImageViewer.Contracts", Order=0)]
        public System.IO.Stream ImageStream;
        
        public ImageData() {
        }
        
        public ImageData(ImageClient.ImageServiceReference.ImageInfo ImageInfo, System.IO.Stream ImageStream) {
            this.ImageInfo = ImageInfo;
            this.ImageStream = ImageStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UploadImageResponse {
        
        public UploadImageResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IImageViewerChannel : ImageClient.ImageServiceReference.IImageViewer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImageViewerClient : System.ServiceModel.ClientBase<ImageClient.ImageServiceReference.IImageViewer>, ImageClient.ImageServiceReference.IImageViewer {
        
        public ImageViewerClient() {
        }
        
        public ImageViewerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ImageViewerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImageViewerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImageViewerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ImageClient.ImageServiceReference.FilesData ImageClient.ImageServiceReference.IImageViewer.GetAllImages(ImageClient.ImageServiceReference.GetAllImagesRequest request) {
            return base.Channel.GetAllImages(request);
        }
        
        public ImageClient.ImageServiceReference.ImageInfo[] GetAllImages() {
            ImageClient.ImageServiceReference.GetAllImagesRequest inValue = new ImageClient.ImageServiceReference.GetAllImagesRequest();
            ImageClient.ImageServiceReference.FilesData retVal = ((ImageClient.ImageServiceReference.IImageViewer)(this)).GetAllImages(inValue);
            return retVal.ImageFiles;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ImageClient.ImageServiceReference.FilesData> ImageClient.ImageServiceReference.IImageViewer.GetAllImagesAsync(ImageClient.ImageServiceReference.GetAllImagesRequest request) {
            return base.Channel.GetAllImagesAsync(request);
        }
        
        public System.Threading.Tasks.Task<ImageClient.ImageServiceReference.FilesData> GetAllImagesAsync() {
            ImageClient.ImageServiceReference.GetAllImagesRequest inValue = new ImageClient.ImageServiceReference.GetAllImagesRequest();
            return ((ImageClient.ImageServiceReference.IImageViewer)(this)).GetAllImagesAsync(inValue);
        }
        
        public System.IO.Stream DownloadImage(ImageClient.ImageServiceReference.ImageInfo data) {
            return base.Channel.DownloadImage(data);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> DownloadImageAsync(ImageClient.ImageServiceReference.ImageInfo data) {
            return base.Channel.DownloadImageAsync(data);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ImageClient.ImageServiceReference.UploadImageResponse ImageClient.ImageServiceReference.IImageViewer.UploadImage(ImageClient.ImageServiceReference.ImageData request) {
            return base.Channel.UploadImage(request);
        }
        
        public void UploadImage(ImageClient.ImageServiceReference.ImageInfo ImageInfo, System.IO.Stream ImageStream) {
            ImageClient.ImageServiceReference.ImageData inValue = new ImageClient.ImageServiceReference.ImageData();
            inValue.ImageInfo = ImageInfo;
            inValue.ImageStream = ImageStream;
            ImageClient.ImageServiceReference.UploadImageResponse retVal = ((ImageClient.ImageServiceReference.IImageViewer)(this)).UploadImage(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ImageClient.ImageServiceReference.UploadImageResponse> ImageClient.ImageServiceReference.IImageViewer.UploadImageAsync(ImageClient.ImageServiceReference.ImageData request) {
            return base.Channel.UploadImageAsync(request);
        }
        
        public System.Threading.Tasks.Task<ImageClient.ImageServiceReference.UploadImageResponse> UploadImageAsync(ImageClient.ImageServiceReference.ImageInfo ImageInfo, System.IO.Stream ImageStream) {
            ImageClient.ImageServiceReference.ImageData inValue = new ImageClient.ImageServiceReference.ImageData();
            inValue.ImageInfo = ImageInfo;
            inValue.ImageStream = ImageStream;
            return ((ImageClient.ImageServiceReference.IImageViewer)(this)).UploadImageAsync(inValue);
        }
    }
}
